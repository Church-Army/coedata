---
title: "flat_first.Rmd empty"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r development, include=FALSE}
library(testthat)
```


```{r development-load}
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
```

## Create data environment on load

```{r function-create-environment}
rlang::on_load({
  .coeparishdata_envir <- new.env(parent = emptyenv())
  .coeparishdata_envir$parish_data <- parish_data
  .coeparishdata_envir$parishes_2024 <- NULL
  })
```

## read_parish_data

```{r function-read_parish_data}
read_parish_data <- function(){
  .coeparishdata_envir$parish_data
}
```

```{r tests-read_parish_data}
test_that("read_parish_data works", {
  expect(inherits(read_parish_data, "function"), "read_parish_data is not a function")
  expect_s3_class(read_parish_data(), "tbl_df")
})
```


## read_parish_table

```{r function-read_parish_table}
read_parish_table <- function(){
  p_table <- .coeparishdata_envir$parishes_2024
  
  if(is.null(p_table)){
    p_table <- get_cpd_sheet("1UUUU96Iw5i0JmabEIczmi6DrDsPIw6yfsGwSO5ExeT0", "parishes")
    .coeparishdata_envir$parishes_2024 <- p_table
  } 
  
  p_table
}
```

## good_nomis_codes

```{r function-good_nomis_codes}
good_nomis_codes <- function(){
  unique(read_parish_data()$nomis_code)
}
```

## good_levels

```{r function-good_levels}
good_levels <- function(){
  unique(read_parish_data()$level)
}
```

## get_cpd_sheet

```{r function-get_cpd_sheet}
get_cpd_sheet <- function(drive_id, sheet){
  
  googlesheets4::gs4_deauth()
  
  googlesheets4::read_sheet(ss = drive_id, sheet = sheet)
}
```

```{r tests-get_cpd_sheet}
test_that("get_cpd_sheet works",{
  expect_true(inherits(get_cpd_sheet, "function"))
  
  will_work <- min(which(!is.na(read_parish_data()$drive_id)))

  drived <- read_parish_data()$drive_id[will_work]
  sheet  <- read_parish_data()$nomis_code[will_work]

  expect_no_error(get_cpd_sheet(drived, sheet))
  })
```


## read_cpd_stats

```{r function-read_cpd_stats}
#' Low level function for getting parish-level census data
#' 
#' Get 2021 ONS census data for any number of parishes, dioceses or the whole of England. Parish data is read from a Google sheet
#' 
#' @return A single tibble
#' @param nomis_code Nomis code of required data set
#' @param level One of 'parish', 'diocese' or 'england'

read_cpd_stats <- function(nomis_code, level){
  
  cpd_pd <- read_parish_data()

  requested_row <- which(cpd_pd$nomis_code == nomis_code & cpd_pd$level == level)
  stopifnot(length(requested_row) == 1)
  
  local_data <- cpd_pd$local[requested_row]
  
  if(local_data){
    out <- cpd_pd$data[requested_row][[1]]
  } else{
    # Read google sheet
    out <- get_cpd_sheet(cpd_pd$drive_id[requested_row], cpd_pd$nomis_code[requested_row])
    ## Assign class and units attributes
    class(out) <- c("coe_parish_data", class(out))
    attr(out, "units") <- cpd_pd$units[requested_row]
    
    ## Update data environment with sheet read from google
    .coeparishdata_envir$parish_data[["data"]][[requested_row]] <- out
    .coeparishdata_envir$parish_data[requested_row, "local"] <- TRUE
  }
  out
}
```

```{r tests-read_cpd_stats}
test_that("read_cpd_stats works",{
  expect_true(inherits(read_cpd_stats, "function"))
  
  expect_no_error(read_cpd_stats("TS001", "diocese"))
  expect_s3_class(read_cpd_stats("TS001", "diocese"), c("coe_parish_data", "tbl_df"))
})

test_that("caching is working for parish data",{
  ## Read the data
  read_cpd_stats("TS001", "parish")

  ## Check it has cached
  tmp_dat <- read_parish_data()
  cached <- tmp_dat$data[tmp_dat$level == "parish" & tmp_dat$nomis_code == "TS001"][[1]]

  expect_s3_class(cached, c("coe_parish_data", "tbl_df"))
   })
```
